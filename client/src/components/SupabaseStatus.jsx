import { useState, useEffect } from 'react'
import { supabase } from '../lib/supabaseClient'

export default function SupabaseStatus() {
  const [status, setStatus] = useState({
    connected: false,
    loading: true,
    tables: [],
    error: null
  })

  useEffect(() => {
    testConnection()
  }, [])

  const testConnection = async () => {
    try {
      setStatus(prev => ({ ...prev, loading: true, error: null }))
      
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ auth
      const { data: sessionData, error: sessionError } = await supabase.auth.getSession()
      
      if (sessionError) {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${sessionError.message}`)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
      let tablesData = []
      
      // –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ information_schema
      try {
        const { data: schemaData, error: schemaError } = await supabase
          .from('information_schema.tables')
          .select('table_name, table_schema')
          .limit(20)
        
        if (!schemaError && schemaData) {
          tablesData = schemaData
          console.log('üìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ:', schemaData)
        }
      } catch (err) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ information_schema:', err)
      }
      
      // –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ pg_tables (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
      if (tablesData.length === 0) {
        try {
          const { data: pgData, error: pgError } = await supabase
            .from('pg_tables')
            .select('tablename, schemaname')
            .limit(20)
          
          if (!pgError && pgData) {
            tablesData = pgData.map(t => ({ 
              table_name: t.tablename, 
              table_schema: t.schemaname 
            }))
            console.log('üìã –¢–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ pg_tables:', pgData)
          }
        } catch (err) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ pg_tables:', err)
        }
      }
      
      // –°–ø–æ—Å–æ–± 3: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é
      if (tablesData.length === 0) {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é...')
        const foundTables = await testExistingTables()
        if (foundTables.length > 0) {
          tablesData = foundTables.map(name => ({ table_name: name, table_schema: 'public' }))
        }
      }

      setStatus({
        connected: true,
        loading: false,
        tables: tablesData || [],
        error: null
      })

      console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü:', tablesData?.length || 0)
      
    } catch (err) {
      setStatus({
        connected: false,
        loading: false,
        tables: [],
        error: err.message
      })
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', err)
    }
  }

  const testExistingTables = async () => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...')
    
    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const tablesToTest = [
      'products_moysklad', // —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      'orders', 'products', 'users', 'categories', 'marketplace_orders',
      'order_items', 'customers', 'items', 'inventory', 'suppliers'
    ]
    const existingTables = []
    
    for (const tableName of tablesToTest) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1)
        
        if (!error) {
          existingTables.push(tableName)
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–∞–π–¥–µ–Ω–∞ (–∑–∞–ø–∏—Å–µ–π: ${data?.length || 0})`)
        } else if (error.code === 'PGRST116') {
          // –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ —Ç–æ–∂–µ —É—Å–ø–µ—Ö
          existingTables.push(tableName)
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–∞–π–¥–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)`)
        }
      } catch (err) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
      }
    }
    
    if (existingTables.length > 0) {
      console.log('üéâ –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:', existingTables)
      setStatus(prev => ({ 
        ...prev, 
        tables: existingTables.map(name => ({ table_name: name, table_schema: 'public' }))
      }))
    } else {
      console.log('‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API')
    }
    
    return existingTables
  }

  const createTestTable = async () => {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
      const { data, error } = await supabase.rpc('create_orders_table', {})
      
      if (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ RPC, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ')
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
      testConnection()
    } catch (err) {
      console.log('–¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞:', err.message)
    }
  }

  if (status.loading) {
    return (
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <div className="flex items-center space-x-2">
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
          <span className="text-blue-800">–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase...</span>
        </div>
      </div>
    )
  }

  return (
    <div className={`border rounded-lg p-4 ${status.connected ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}>
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center space-x-2">
          <div className={`w-3 h-3 rounded-full ${status.connected ? 'bg-green-500' : 'bg-red-500'}`}></div>
          <span className={`font-medium ${status.connected ? 'text-green-800' : 'text-red-800'}`}>
            Supabase {status.connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
          </span>
        </div>
        
        <button 
          onClick={testConnection}
          className="text-sm bg-white px-3 py-1 rounded border hover:bg-gray-50"
        >
          –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {status.error && (
        <div className="text-red-700 text-sm mb-3 bg-red-100 p-2 rounded">
          {status.error}
        </div>
      )}

      {status.connected && (
        <div className="space-y-3">
          <div>
            <span className="text-sm font-medium text-gray-700">
              –¢–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ: {status.tables.length}
            </span>
            {status.tables.length > 0 && (
              <div className="mt-2 text-xs text-gray-600">
                {status.tables.map((table, i) => (
                  <span key={i} className="inline-block bg-gray-200 rounded px-2 py-1 mr-2 mb-1">
                    {table.table_name}
                  </span>
                ))}
              </div>
            )}
          </div>
          
          <div className="flex space-x-2 flex-wrap">
            <button 
              onClick={testExistingTables}
              className="text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700"
            >
              –ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
            </button>
            <button 
              onClick={async () => {
                console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º products_moysklad...')
                try {
                  const { data, error } = await supabase
                    .from('products_moysklad')
                    .select('*')
                    .limit(5)
                  
                  if (!error) {
                    console.log('‚úÖ products_moysklad —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–∞–Ω–Ω—ã–µ:', data)
                    setStatus(prev => ({ 
                      ...prev, 
                      tables: [{ table_name: 'products_moysklad', table_schema: 'public' }]
                    }))
                  } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ products_moysklad:', error)
                  }
                } catch (err) {
                  console.log('‚ùå –û—à–∏–±–∫–∞:', err)
                }
              }}
              className="text-sm bg-purple-600 text-white px-3 py-1 rounded hover:bg-purple-700"
            >
              –¢–µ—Å—Ç products_moysklad
            </button>
            <button 
              onClick={createTestTable}
              className="text-sm bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700"
            >
              –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            </button>
          </div>
        </div>
      )}
    </div>
  )
}