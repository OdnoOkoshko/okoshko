// ProductTabs.jsx - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ª–æ–≥–∏–∫–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏

import { useState, useEffect, useMemo, useRef } from 'react'
import { FiSettings, FiRotateCcw } from 'react-icons/fi'
import SearchBar from './SearchBar'
import ProductTable from './ProductTable'
import PaginationControls from './PaginationControls'
import { usePersistentState } from '../../../shared/hooks/usePersistentState'
import { usePersistentStateWithKey } from '../../../shared/hooks/usePersistentStateWithKey'
import { removeFromStorage } from '../../../shared/storage.ts'
import { useTabData } from '../hooks/useTabData.js'
import { TAB_CONFIGS } from '../config/tabs.js'
import { sortData } from '../utils/sortData.js'

export default function ProductTabs() {
  const [activeTab, setActiveTab] = useState('moysklad')
  const { tabData, loading, error, fetchTabData } = useTabData()
  const [currentPage, setCurrentPage] = useState(1)
  const [searchTerm, setSearchTerm] = useState('')
  const [hiddenColumns, setHiddenColumns] = usePersistentState('okoshko_hiddenColumns', [])
  const [columnWidths, setColumnWidths] = usePersistentStateWithKey(() => `okoshko_columnWidths_${activeTab}`, {}, [activeTab])
  const [sortConfig, setSortConfig] = usePersistentStateWithKey(() => `okoshko_sortConfig_${activeTab}`, { column: null, direction: null }, [activeTab])
  const [showColumnMenu, setShowColumnMenu] = useState(false)
  const menuRef = useRef(null)
  const buttonRef = useRef(null)
  const itemsPerPage = 100

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏
  useEffect(() => {
    fetchTabData(activeTab)
  }, [activeTab])
  
  useEffect(() => setCurrentPage(1), [activeTab, searchTerm])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const fullData = tabData[activeTab] || []
  


  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        menuRef.current &&
        !menuRef.current.contains(event.target) &&
        buttonRef.current &&
        !buttonRef.current.contains(event.target)
      ) {
        setShowColumnMenu(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const processedData = useMemo(() => {
    // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    let filtered = fullData
    if (searchTerm.trim() !== '') {
      const searchLower = searchTerm.toLowerCase().trim()
      filtered = fullData.filter(item => {
        const searchableText = Object.values(item).join(' ').toLowerCase()
        return searchableText.includes(searchLower)
      })
    }

    // –ó–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    return sortData(filtered, sortConfig)
  }, [fullData, searchTerm, sortConfig])

  const filteredData = processedData

  const totalCount = filteredData.length
  const totalPages = Math.ceil(totalCount / itemsPerPage)
  const start = (currentPage - 1) * itemsPerPage
  const end = currentPage * itemsPerPage
  const pageData = filteredData.slice(start, end)
  const startItem = start + 1
  const endItem = Math.min(end, totalCount)

  // –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const goToPage = (page) => {
    if (page >= 1 && page <= totalPages) setCurrentPage(page)
  }
  const goToPrevPage = () => goToPage(currentPage - 1)
  const goToNextPage = () => goToPage(currentPage + 1)
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏
  const toggleColumn = (column) => {
    setHiddenColumns(prev =>
      prev.includes(column)
        ? prev.filter(c => c !== column)
        : [...prev, column]
    )
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSort = (columnKey) => {
    let newDirection = 'asc'
    
    if (sortConfig.column === columnKey) {
      if (sortConfig.direction === 'asc') {
        newDirection = 'desc'
      } else if (sortConfig.direction === 'desc') {
        newDirection = null
      }
    }
    
    const newSortConfig = { 
      column: newDirection ? columnKey : null, 
      direction: newDirection 
    }
    
    setSortConfig(newSortConfig)
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const handleResetSettings = () => {
    // –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
    removeFromStorage(`okoshko_columnWidths_${activeTab}`)
    removeFromStorage(`okoshko_sortConfig_${activeTab}`)
    removeFromStorage('okoshko_hiddenColumns')
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
    setColumnWidths({})
    setSortConfig({ column: null, direction: null })
    setHiddenColumns([])
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
  const handleTabSwitch = (tabKey) => {
    setActiveTab(tabKey)
    // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –≤ useEffect
  }

  return (
    <div className="space-y-6">
      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="flex justify-center space-x-1 bg-gray-100 rounded-lg p-1">
        {TAB_CONFIGS.map(({ key, label, gradient }) => (
          <button
            key={key}
            onClick={() => handleTabSwitch(key)}
            className={`px-4 py-2 text-sm font-medium rounded-md transition-all ${
              activeTab === key
                ? `bg-gradient-to-r ${gradient} text-white shadow-sm`
                : 'text-gray-600 hover:text-gray-800'
            }`}
          >
            {label}
            {!tabData[key] && key !== activeTab && (
              <span className="ml-1 text-xs opacity-60">‚Ä¢</span>
            )}
          </button>
        ))}
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="min-h-[400px]">
        {loading && (
          <div className="flex items-center justify-center py-16">
            <div className="flex items-center space-x-3">
              <div className="animate-spin rounded-full h-6 w-6 border-2 border-blue-500 border-t-transparent"></div>
              <span className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
            </div>
          </div>
        )}

        {error && (
          <div className="text-red-600 p-8 text-center bg-red-50 border border-red-200 rounded">
            <div className="text-lg font-medium mb-2">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</div>
            <div className="text-sm text-red-500">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∫–ª–∞–¥–∫—É</div>
          </div>
        )}

        {!loading && !error && fullData.length === 0 && (
          <div className="bg-white p-8 rounded-lg shadow-md">
            <div className="text-center text-gray-500">
              <div className="text-4xl mb-4">üìã</div>
              <div className="text-lg font-medium">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
            </div>
          </div>
        )}

        {!loading && !error && fullData.length > 0 && (
          <div className="bg-white p-4 rounded-lg shadow-md">
            {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="grid grid-cols-3 items-center mb-3">
              {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–µ–π */}
              <div className="text-sm text-gray-600">
                {searchTerm ? (
                  <>–ù–∞–π–¥–µ–Ω–æ {filteredData.length} –∏–∑ {fullData.length} ‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω–æ {startItem}‚Äì{endItem}</>
                ) : (
                  <>–ü–æ–∫–∞–∑–∞–Ω–æ {startItem}‚Äì{endItem} –∏–∑ {totalCount}</>
                )}
              </div>
              
              {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –ø–æ–∏—Å–∫ */}
              <div className="flex justify-center">
                <SearchBar searchTerm={searchTerm} setSearchTerm={setSearchTerm} />
              </div>
              
              {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
              <div className="flex justify-end items-center space-x-1">
                <button
                  onClick={handleResetSettings}
                  className="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-full transition-colors cursor-pointer"
                  title="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"
                >
                  <FiRotateCcw size={18} />
                </button>
                <div className="relative">
                  <button
                    ref={buttonRef}
                    onClick={() => setShowColumnMenu(!showColumnMenu)}
                    className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-full transition-colors cursor-pointer"
                    title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞–º–∏"
                  >
                    <FiSettings size={18} />
                  </button>
                </div>
              </div>
            </div>
            
            {pageData.length === 0 && searchTerm.trim() !== '' ? (
              <div className="text-center py-12 text-gray-500">
                <div className="text-4xl mb-4">üîç</div>
                <div className="text-lg font-medium">–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</div>
                <div className="text-sm mt-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</div>
              </div>
            ) : (
              <ProductTable 
                pageData={pageData} 
                fullData={fullData}
                showColumnMenu={showColumnMenu}
                setShowColumnMenu={setShowColumnMenu}
                hiddenColumns={hiddenColumns}
                setHiddenColumns={setHiddenColumns}
                menuRef={menuRef}
                buttonRef={buttonRef}
                toggleColumn={toggleColumn}
                searchTerm={searchTerm}
                columnWidths={columnWidths}
                setColumnWidths={setColumnWidths}
                activeTab={activeTab}
                sortConfig={sortConfig}
                onSort={handleSort}
              />
            )}
            
            <PaginationControls 
              currentPage={currentPage}
              totalPages={totalPages}
              goToPage={goToPage}
              goToPrevPage={goToPrevPage}
              goToNextPage={goToNextPage}
            />
          </div>
        )}
      </div>
    </div>
  )
}